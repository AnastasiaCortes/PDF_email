#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
    max_revenue = {"revenue": 0}
    max_sales = 0
    car_year = {}
    year_max = 0
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        #  Also handle max sales
        if item["total_sales"] > max_sales:
            max_sales = item["total_sales"]
            car_md = item["car"]
        #  Also handle most popular car_year
        year = item["car"]["car_year"]
        if year not in car_year.keys():
            car_year[year] = item["total_sales"]
        else:
            car_year[year] = car_year[year] + item["total_sales"]
    for k, v in car_year.items():
        if v > year_max:
            year_max = v
            max_year = k
        else:
            continue
    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]), "The {} had the most sales {}".format(format_car(car_md), max_sales), "The most popular year was {} with {} sales".format(max_year, year_max)]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    # Turn this into a PDF report
    sum = '\n'.join(summary)
    summ = "<br/>".join(summary)
    reports.generate("/tmp/cars.pdf", title="Sales summary for last month",
                     additional_info=summ, table_data=cars_dict_to_table(data))
    # Send the PDF report as an email attachment
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = sum

    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)


if __name__ == "__main__":
    main(sys.argv)
